// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model Appointment {
  id String @id @default(uuid()) @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  centerId String @db.Uuid
  center   Center @relation(fields: [centerId], references: [id])

  doctorId String @db.Uuid
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  createdDate     DateTime @default(now())
  updatedAt       DateTime @updatedAt
  appointmentDate DateTime

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String  @unique @db.Uuid // cada valor de paymentId debe ser único en la base de datos y se almacena como un identificador UUID
}

model Payment {
  id                  String       @id @default(uuid()) @db.Uuid
  amount              Int
  paymentMethod       String       @db.VarChar(64)
  paymentConfirmation Boolean
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  appointment         Appointment?
}

model User {
  id                String   @id @default(uuid()) @db.Uuid
  fullName          String   @db.VarChar(128)
  gender            String   @db.VarChar(64)
  email             String   @unique @db.VarChar(64)
  password          String
  photo             String?  @db.VarChar(128)
  userType          String   @db.VarChar(64)
  citizenshipNumber Int      @unique
  enabled           Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  locationId String   @db.Uuid
  location   Location @relation(fields: [locationId], references: [id])

  appointments Appointment[]
}

model Location {
  id        String   @id @default(uuid()) @db.Uuid
  country   String   @db.VarChar(64)
  city      String   @db.VarChar(64)
  address   String   @db.VarChar(128)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]

  center Center?
}

model Center {
  id          String @id @default(uuid()) @db.Uuid
  centerName  String @db.VarChar(64)
  description String @db.VarChar(256)

  locationId String   @unique @db.Uuid
  location   Location @relation(fields: [locationId], references: [id])

  photo           String?           @db.VarChar(128)
  enabled         Boolean
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Appointment     Appointment[]
  Doctor          Doctor[]
  specialties     Specialty[]
  CenterSpecialty CenterSpecialty[]
}

model Doctor {
  id       String @id @default(uuid()) @db.Uuid
  fullName String @db.VarChar(128)

  centerId String @db.Uuid
  center   Center @relation(fields: [centerId], references: [id])

  specialtyId String    @db.Uuid
  specialty   Specialty @relation(fields: [specialtyId], references: [id])

  photo   String? @db.VarChar(128)
  enabled Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Appointment Appointment[]
}

model Specialty {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @db.VarChar(64)
  description     String            @db.VarChar(256)
  enabled         Boolean
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctors         Doctor[] // Por ejemplo, si tienes una especialidad llamada "Cardiología" en el modelo Specialty y varios médicos que tienen esa especialidad en sus registros, la relación doctors te permitirá acceder a todos esos médicos desde el registro de "Cardiología" en el modelo Specialty.
  centers         Center[]
  CenterSpecialty CenterSpecialty[]
}

model CenterSpecialty {
  id String @id @default(uuid()) @db.Uuid

  centerId String @db.Uuid
  center   Center @relation(fields: [centerId], references: [id])

  specialtyId String    @db.Uuid
  specialty   Specialty @relation(fields: [specialtyId], references: [id])

  @@unique([centerId, specialtyId]) // Esta restricción asegura que no puede haber duplicados de la combinación de centerId y specialtyId en esa tabla. 
}
